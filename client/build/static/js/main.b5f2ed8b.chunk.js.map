{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchRoutes.js","utils/API.js","utils/queries.js","pages/SavedRoutes.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_ROUTE","REMOVE_ROUTE","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeRouteId","routeId","savedrouteIds","JSON","parse","updatedSavedrouteIds","filter","savedrouteId","stringify","SearchRoutes","useState","searchedroutes","setSearchedroutes","searchInput","setSearchInput","setSavedrouteIds","useMutation","saveroute","error","useEffect","routeIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","routeData","map","route","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveroute","routeToSave","find","Auth","loggedIn","variables","input","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedRoutes","useQuery","loading","removeRoute","userData","me","handleDeleteroute","SignupForm","addUser","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5f2ed8b.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const LOGIN_USER = gql`\n  mutation loginUser($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        routeCount\n        SavedRoutes {\n          routeId\n          title\n          description\n          authors\n          image\n          link\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $password: String!, $email: String!) {\n    addUser(username: $username, password: $password, email: $email) {\n      token\n      user {\n        _id\n        username\n        email\n        routeCount\n        SavedRoutes {\n          routeId\n          title\n          description\n          authors\n          image\n          link\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_ROUTE = gql`\n  mutation saveroute($input: savedroute!) {\n    saveroute(input: $input) {\n      _id\n      username\n      email\n      routeCount\n      SavedRoutes {\n        # _id\n        routeId\n        title\n        description\n        authors\n        image\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_ROUTE = gql`\n  mutation removeRoute($routeId: ID!) {\n    removeRoute(routeId: $routeId) {\n      _id\n      username\n      email\n      routeCount\n      SavedRoutes {\n        # _id\n        routeId\n        title\n        description\n        authors\n        image\n        link\n      }\n    }\n  }\n`;\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedrouteIds = () => {\n  const savedrouteIds = localStorage.getItem(\"saved_routes\")\n    ? JSON.parse(localStorage.getItem(\"saved_routes\"))\n    : [];\n\n  return savedrouteIds;\n};\n\nexport const saverouteIds = (routeIdArr) => {\n  if (routeIdArr.length) {\n    localStorage.setItem(\"saved_routes\", JSON.stringify(routeIdArr));\n  } else {\n    localStorage.removeItem(\"saved_routes\");\n  }\n};\n\nexport const removeRouteId = (routeId) => {\n  const savedrouteIds = localStorage.getItem(\"saved_routes\")\n    ? JSON.parse(localStorage.getItem(\"saved_routes\"))\n    : null;\n\n  if (!savedrouteIds) {\n    return false;\n  }\n\n  const updatedSavedrouteIds = savedrouteIds?.filter(\n    (savedrouteId) => savedrouteId !== routeId\n  );\n  localStorage.setItem(\"saved_routes\", JSON.stringify(updatedSavedrouteIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n// import the mutation we're going to execute\nimport { SAVE_ROUTE } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { saveroute, searchSkyScannerRoutes } from \"../utils/API\";\nimport { saverouteIds, getSavedrouteIds } from \"../utils/localStorage\";\n\nconst SearchRoutes = () => {\n  const [searchedroutes, setSearchedroutes] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const [savedrouteIds, setSavedrouteIds] = useState(getSavedrouteIds());\n\n  const [saveroute, { error }] = useMutation(SAVE_ROUTE);\n\n  useEffect(() => {\n    return () => saverouteIds(savedrouteIds);\n  });\n\n  // function to search and to set state\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchSkyScannerRoutes(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const routeData = items.map((route) => ({\n        routeId: route.id,\n        authors: route.volumeInfo.authors || [\"No author to display\"],\n        title: route.volumeInfo.title,\n        description: route.volumeInfo.description,\n        image: route.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedroutes(routeData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // function to save route and add to state\n  const handleSaveroute = async (routeId) => {\n    const routeToSave = searchedroutes.find(\n      (route) => route.routeId === routeId\n    );\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveroute({\n        variables: { input: routeToSave },\n      });\n\n      setSavedrouteIds([...savedrouteIds, routeToSave.routeId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for routes!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a route\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedroutes.length\n            ? `Viewing ${searchedroutes.length} results:`\n            : \"Search for a route to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedroutes.map((route) => {\n            return (\n              <Card key={route.routeId} border=\"dark\">\n                {route.image ? (\n                  <Card.Img\n                    src={route.image}\n                    alt={`The cover for ${route.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{route.title}</Card.Title>\n                  <p className=\"small\">Authors: {route.authors}</p>\n                  <Card.Text>{route.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedrouteIds?.some(\n                        (savedrouteId) => savedrouteId === route.routeId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveroute(route.routeId)}\n                    >\n                      {savedrouteIds?.some(\n                        (savedrouteId) => savedrouteId === route.routeId\n                      )\n                        ? \"This route has already been saved!\"\n                        : \"Save this route!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchRoutes;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch(\"/api/users/me\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch(\"/api/users\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch(\"/api/users/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save route data for a logged in user\nexport const saveroute = (routeData, token) => {\n  return fetch(\"/api/users\", {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(routeData),\n  });\n};\n\n// remove saved route data for a logged in user\nexport const deleteroute = (routeId, token) => {\n  return fetch(`/api/users/routes/${routeId}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to skyscanner API\n// https://rapidapi.com/skyscanner/api/skyscanner-flight-search\nexport const searchSkyScannerRoutes = (query) => {\n  return fetch(\n    `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/US/USD/en-US/${query}`\n  );\n};\n","import gql from \"graphql-tag\";\n\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      routeCount\n      SavedRoutes {\n        # _id\n        routeId\n        authors\n        title\n        description\n        image\n        link\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\n// import the query we're going to execute and the mutation\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_ROUTE } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport { removeRouteId } from \"../utils/localStorage\";\n\nconst SavedRoutes = () => {\n  // execute the query on component load\n  const { loading, data } = useQuery(GET_ME);\n  const [removeRoute, { error }] = useMutation(REMOVE_ROUTE);\n  // check to see if data is there and if not then return an empty array\n  const userData = data?.me || [];\n\n  const handleDeleteroute = async (routeId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeRoute({\n        variables: { routeId },\n      });\n\n      removeRouteId(routeId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved routes!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.SavedRoutes.length\n            ? `Viewing ${userData.SavedRoutes.length} saved ${\n                userData.SavedRoutes.length === 1 ? \"route\" : \"routes\"\n              }:`\n            : \"You have no saved routes!\"}\n        </h2>\n        <CardColumns>\n          {userData.SavedRoutes.map((route) => {\n            return (\n              <Card key={route.routeId} border=\"dark\">\n                {route.image ? (\n                  <Card.Img\n                    src={route.image}\n                    alt={`The cover for ${route.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{route.title}</Card.Title>\n                  <p className=\"small\">Authors: {route.authors}</p>\n                  <Card.Text>{route.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteroute(route.routeId)}\n                  >\n                    Delete this route!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedRoutes;\n","import React, { useState } from \"react\";\n// import useMutation hook from apollo client\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\n// import the graphql mutation\nimport { ADD_USER } from \"../utils/mutations\";\n\nconst SignupForm = () => {\n  // invoke useMutation hook to return a promise-based function and data about the ADD_USER mutation\n  const [addUser] = useMutation(ADD_USER);\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n\n    // use try/catch since it's async\n    try {\n      // execute addUser mutation and pass in data from form\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (error) {\n      console.error(error);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n        {/* {error && <div>Sign up failed</div>} */}\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nconst LoginForm = () => {\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (error) {\n      console.error(error);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n      {error && <div>Login failed</div>}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Flight Chicken 🐔\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For routes\n              </Nav.Link>\n              {/* if user is logged in show saved routes and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your routes\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchRoutes from \"./pages/SearchRoutes\";\nimport SavedRoutes from \"./pages/SavedRoutes\";\nimport Navbar from \"./components/Navbar\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={SearchRoutes} />\n          <Route exact path=\"/saved\" component={SavedRoutes} />\n          <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}