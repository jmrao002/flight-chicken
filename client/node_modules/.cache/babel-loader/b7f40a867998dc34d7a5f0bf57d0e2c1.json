{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mrao/Code/flight-chicken/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mrao/Code/flight-chicken/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/mrao/Code/flight-chicken/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{Jumbotron,Container,CardColumns,Card,Button}from\"react-bootstrap\";import{useMutation,useQuery}from\"@apollo/react-hooks\";// import the query we're going to execute and the mutation\nimport{GET_ME}from\"../utils/queries\";import{REMOVE_ROUTE}from\"../utils/mutations\";import Auth from\"../utils/auth\";import{removeRouteId}from\"../utils/localStorage\";var SavedRoutes=function SavedRoutes(){// execute the query on component load\nvar _useQuery=useQuery(GET_ME),loading=_useQuery.loading,data=_useQuery.data;var _useMutation=useMutation(REMOVE_ROUTE),_useMutation2=_slicedToArray(_useMutation,2),removeRoute=_useMutation2[0],error=_useMutation2[1].error;// check to see if data is there and if not then return an empty array\nvar userData=(data===null||data===void 0?void 0:data.me)||[];var handleDeleteroute=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(routeId){var token,_yield$removeRoute,_data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:token=Auth.loggedIn()?Auth.getToken():null;if(token){_context.next=3;break;}return _context.abrupt(\"return\",false);case 3:_context.prev=3;_context.next=6;return removeRoute({variables:{routeId:routeId}});case 6:_yield$removeRoute=_context.sent;_data=_yield$removeRoute.data;removeRouteId(routeId);_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](3);console.error(_context.t0);case 14:case\"end\":return _context.stop();}}},_callee,null,[[3,11]]);}));return function handleDeleteroute(_x){return _ref.apply(this,arguments);};}();if(loading){return/*#__PURE__*/React.createElement(\"h2\",null,\"Loading...\");}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Jumbotron,{fluid:true,className:\"text-light bg-dark\"},/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(\"h1\",null,\"Viewing saved routes!\"))),/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(\"h2\",null,userData.SavedRoutes.length?\"Viewing \".concat(userData.SavedRoutes.length,\" saved \").concat(userData.SavedRoutes.length===1?\"route\":\"routes\",\":\"):\"You have no saved routes!\"),/*#__PURE__*/React.createElement(CardColumns,null,userData.SavedRoutes.map(function(route){return/*#__PURE__*/React.createElement(Card,{key:route.routeId,border:\"dark\"},route.image?/*#__PURE__*/React.createElement(Card.Img,{src:route.image,alt:\"The cover for \".concat(route.title),variant:\"top\"}):null,/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,route.title),/*#__PURE__*/React.createElement(\"p\",{className:\"small\"},\"Authors: \",route.authors),/*#__PURE__*/React.createElement(Card.Text,null,route.description),/*#__PURE__*/React.createElement(Button,{className:\"btn-block btn-danger\",onClick:function onClick(){return handleDeleteroute(route.routeId);}},\"Delete this route!\")));}))));};export default SavedRoutes;","map":{"version":3,"sources":["/Users/mrao/Code/flight-chicken/client/src/pages/SavedRoutes.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","useMutation","useQuery","GET_ME","REMOVE_ROUTE","Auth","removeRouteId","SavedRoutes","loading","data","removeRoute","error","userData","me","handleDeleteroute","routeId","token","loggedIn","getToken","variables","console","length","map","route","image","title","authors","description"],"mappings":"odAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,SADF,CAEEC,SAFF,CAGEC,WAHF,CAIEC,IAJF,CAKEC,MALF,KAMO,iBANP,CAOA,OAASC,WAAT,CAAsBC,QAAtB,KAAsC,qBAAtC,CACA;AACA,OAASC,MAAT,KAAuB,kBAAvB,CACA,OAASC,YAAT,KAA6B,oBAA7B,CAEA,MAAOC,CAAAA,IAAP,KAAiB,eAAjB,CACA,OAASC,aAAT,KAA8B,uBAA9B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB;AACA,cAA0BL,QAAQ,CAACC,MAAD,CAAlC,CAAQK,OAAR,WAAQA,OAAR,CAAiBC,IAAjB,WAAiBA,IAAjB,CACA,iBAAiCR,WAAW,CAACG,YAAD,CAA5C,8CAAOM,WAAP,kBAAsBC,KAAtB,kBAAsBA,KAAtB,CACA;AACA,GAAMC,CAAAA,QAAQ,CAAG,CAAAH,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEI,EAAN,GAAY,EAA7B,CAEA,GAAMC,CAAAA,iBAAiB,0FAAG,iBAAOC,OAAP,qJAClBC,KADkB,CACVX,IAAI,CAACY,QAAL,GAAkBZ,IAAI,CAACa,QAAL,EAAlB,CAAoC,IAD1B,IAGnBF,KAHmB,yDAIf,KAJe,+CAQCN,CAAAA,WAAW,CAAC,CACjCS,SAAS,CAAE,CAAEJ,OAAO,CAAPA,OAAF,CADsB,CAAD,CARZ,yCAQdN,KARc,oBAQdA,IARc,CAYtBH,aAAa,CAACS,OAAD,CAAb,CAZsB,iFActBK,OAAO,CAACT,KAAR,cAdsB,qEAAH,kBAAjBG,CAAAA,iBAAiB,4CAAvB,CAkBA,GAAIN,OAAJ,CAAa,CACX,mBAAO,2CAAP,CACD,CAED,mBACE,qDACE,oBAAC,SAAD,EAAW,KAAK,KAAhB,CAAiB,SAAS,CAAC,oBAA3B,eACE,oBAAC,SAAD,mBACE,sDADF,CADF,CADF,cAME,oBAAC,SAAD,mBACE,8BACGI,QAAQ,CAACL,WAAT,CAAqBc,MAArB,mBACcT,QAAQ,CAACL,WAAT,CAAqBc,MADnC,mBAEKT,QAAQ,CAACL,WAAT,CAAqBc,MAArB,GAAgC,CAAhC,CAAoC,OAApC,CAA8C,QAFnD,MAIG,2BALN,CADF,cAQE,oBAAC,WAAD,MACGT,QAAQ,CAACL,WAAT,CAAqBe,GAArB,CAAyB,SAACC,KAAD,CAAW,CACnC,mBACE,oBAAC,IAAD,EAAM,GAAG,CAAEA,KAAK,CAACR,OAAjB,CAA0B,MAAM,CAAC,MAAjC,EACGQ,KAAK,CAACC,KAAN,cACC,oBAAC,IAAD,CAAM,GAAN,EACE,GAAG,CAAED,KAAK,CAACC,KADb,CAEE,GAAG,yBAAmBD,KAAK,CAACE,KAAzB,CAFL,CAGE,OAAO,CAAC,KAHV,EADD,CAMG,IAPN,cAQE,oBAAC,IAAD,CAAM,IAAN,mBACE,oBAAC,IAAD,CAAM,KAAN,MAAaF,KAAK,CAACE,KAAnB,CADF,cAEE,yBAAG,SAAS,CAAC,OAAb,cAA+BF,KAAK,CAACG,OAArC,CAFF,cAGE,oBAAC,IAAD,CAAM,IAAN,MAAYH,KAAK,CAACI,WAAlB,CAHF,cAIE,oBAAC,MAAD,EACE,SAAS,CAAC,sBADZ,CAEE,OAAO,CAAE,yBAAMb,CAAAA,iBAAiB,CAACS,KAAK,CAACR,OAAP,CAAvB,EAFX,uBAJF,CARF,CADF,CAsBD,CAvBA,CADH,CARF,CANF,CADF,CA4CD,CAzED,CA2EA,cAAeR,CAAAA,WAAf","sourcesContent":["import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\n// import the query we're going to execute and the mutation\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_ROUTE } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport { removeRouteId } from \"../utils/localStorage\";\n\nconst SavedRoutes = () => {\n  // execute the query on component load\n  const { loading, data } = useQuery(GET_ME);\n  const [removeRoute, { error }] = useMutation(REMOVE_ROUTE);\n  // check to see if data is there and if not then return an empty array\n  const userData = data?.me || [];\n\n  const handleDeleteroute = async (routeId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeRoute({\n        variables: { routeId },\n      });\n\n      removeRouteId(routeId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved routes!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.SavedRoutes.length\n            ? `Viewing ${userData.SavedRoutes.length} saved ${\n                userData.SavedRoutes.length === 1 ? \"route\" : \"routes\"\n              }:`\n            : \"You have no saved routes!\"}\n        </h2>\n        <CardColumns>\n          {userData.SavedRoutes.map((route) => {\n            return (\n              <Card key={route.routeId} border=\"dark\">\n                {route.image ? (\n                  <Card.Img\n                    src={route.image}\n                    alt={`The cover for ${route.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{route.title}</Card.Title>\n                  <p className=\"small\">Authors: {route.authors}</p>\n                  <Card.Text>{route.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteroute(route.routeId)}\n                  >\n                    Delete this route!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedRoutes;\n"]},"metadata":{},"sourceType":"module"}