{"ast":null,"code":"var _jsxFileName = \"/Users/mrao/Code/flight-chicken/client/src/pages/SavedRoutes.js\";\nimport React from \"react\";\nimport { Jumbotron, Container, CardColumns, Card, Button } from \"react-bootstrap\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\"; // import the query we're going to execute and the mutation\n\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_ROUTE } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { removeRouteId } from \"../utils/localStorage\";\n\nconst SavedRoutes = () => {\n  // execute the query on component load\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME);\n  const [removeRoute, {\n    error\n  }] = useMutation(REMOVE_ROUTE); // check to see if data is there and if not then return an empty array\n\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || [];\n\n  const handleDeleteroute = async routeId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await removeRoute({\n        variables: {\n          routeId\n        }\n      });\n      removeRouteId(routeId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"Viewing saved routes!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, userData.SavedRoutes.length ? `Viewing ${userData.SavedRoutes.length} saved ${userData.SavedRoutes.length === 1 ? \"route\" : \"routes\"}:` : \"You have no saved routes!\"), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, userData.SavedRoutes.map(route => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: route.routeId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, route.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: route.image,\n      alt: `The cover for ${route.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, route.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }\n    }, \"Authors: \", route.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, route.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteroute(route.routeId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, \"Delete this route!\")));\n  }))));\n};\n\nexport default SavedRoutes;","map":{"version":3,"sources":["/Users/mrao/Code/flight-chicken/client/src/pages/SavedRoutes.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","useMutation","useQuery","GET_ME","REMOVE_ROUTE","Auth","removeRouteId","SavedRoutes","loading","data","removeRoute","error","userData","me","handleDeleteroute","routeId","token","loggedIn","getToken","variables","console","length","map","route","image","title","authors","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\n// import the query we're going to execute and the mutation\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_ROUTE } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport { removeRouteId } from \"../utils/localStorage\";\n\nconst SavedRoutes = () => {\n  // execute the query on component load\n  const { loading, data } = useQuery(GET_ME);\n  const [removeRoute, { error }] = useMutation(REMOVE_ROUTE);\n  // check to see if data is there and if not then return an empty array\n  const userData = data?.me || [];\n\n  const handleDeleteroute = async (routeId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeRoute({\n        variables: { routeId },\n      });\n\n      removeRouteId(routeId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved routes!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.SavedRoutes.length\n            ? `Viewing ${userData.SavedRoutes.length} saved ${\n                userData.SavedRoutes.length === 1 ? \"route\" : \"routes\"\n              }:`\n            : \"You have no saved routes!\"}\n        </h2>\n        <CardColumns>\n          {userData.SavedRoutes.map((route) => {\n            return (\n              <Card key={route.routeId} border=\"dark\">\n                {route.image ? (\n                  <Card.Img\n                    src={route.image}\n                    alt={`The cover for ${route.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{route.title}</Card.Title>\n                  <p className=\"small\">Authors: {route.authors}</p>\n                  <Card.Text>{route.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteroute(route.routeId)}\n                  >\n                    Delete this route!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedRoutes;\n"]},"metadata":{},"sourceType":"module"}